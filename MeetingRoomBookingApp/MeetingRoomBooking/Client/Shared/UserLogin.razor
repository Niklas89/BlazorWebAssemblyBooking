@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Login</h3>
<br />
<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Mail" class="form-control" />
        <ValidationMessage For="@(() => user.Mail)" />
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
        <ValidationMessage For="@(() => user.Password)" />
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>
<br />
<p>Would you like to create an account ? <a href="register">Register here.</a></p>

@code {
    private UserLoginDto user = new UserLoginDto();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}